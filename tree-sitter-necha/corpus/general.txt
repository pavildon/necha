==========
identifier
==========
lala
---
(source_file
  (identifier))

===========
identifiers
===========
lala
lala
---
(source_file
  (identifier) (identifier))

======
numbers
======
1.2
3.2
4
2
---
(source_file
  (number) (number) (number) (number))

=============
function call
=============
a_fn la la la
---
(source_file
  (function_call
      id: (identifier)
      arg: (identifier)
      arg: (identifier)
      arg: (identifier)))

=============
function calls
=============
a_fn la la la

hello a 2 c
---
(source_file
  (function_call
      id: (identifier)
      arg: (identifier)
      arg: (identifier)
      arg: (identifier))
  (function_call
      id: (identifier)
      arg: (identifier)
      arg: (number)
      arg: (identifier)))

==========
assignment
==========
pub mutable a = a
---
(source_file
  (assignment (pub) (mutable)
    (identifier) (identifier)))

===========
assignments
===========
a = a

a = a _
  a
---
(source_file
  (assignment
    (identifier) (identifier))
  (assignment
    (identifier)
    (function_call (identifier) (identifier))))

=====
paren
=====
f = sum 1 1.3

another = send _
  (sum 3 4)
---
(source_file
  (assignment (identifier) 
    (function_call (identifier) (number) (number)))
  (assignment (identifier)
    (function_call (identifier) (function_call (identifier) (number) (number)))))

==========
brace expr
==========
a = {a}
s = { 
  a = 3 
  a
  send a

  big { 
    a = 1.2 
    a
  } z
}
---
(source_file
  (assignment (identifier) (brace_expr (identifier)))
  (assignment (identifier) 
    (brace_expr 
      (assignment (identifier) (number))
      (identifier)
      (function_call (identifier) (identifier))
      (function_call (identifier) 
        (brace_expr 
          (assignment (identifier) (number)) 
          (identifier)) 
        (identifier))
    )
  )
)

=========
math expr
=========
a = 1 + 1

calc 1 + 1 + (hola abc) + 2
---
(source_file
 (assignment (identifier)
  (math_expr 
   (number) (plus) (number)
  ))
 (function_call
  (identifier)
  (math_expr
   (math_expr
    (math_expr
     (number)
     (plus)
     (number))
    (plus)
    (function_call
     (identifier)
     (identifier)) 
   )
   (plus)
   (number)))
 )

=========
bool_expr
=========
a = c + 1 < (d s)
---
(source_file
  (assignment
    (identifier)
    (boolean_expr 
      (math_expr (identifier) (plus) (number))
      (less) 
      (function_call (identifier) (identifier)))))

==========
brace_expr
==========
a = [
  a, 
  b,
  {a = 1; mul a}
]
---
(source_file
  (assignment (identifier)
  (bracket_expr (identifier) (identifier) 
  (brace_expr (assignment (identifier) (number))
    (function_call (identifier) (identifier))))))

=======
if_expr
=======
a = if (b == 2) two else {
  lala = 8 
  not_two
}
---
(source_file
  (assignment (identifier)
    (if_expr 
      (boolean_expr 
        (identifier) (eq) (number)) 
        (identifier) 
        (brace_expr (assignment (identifier) (number)) (identifier)))))

=====
unary
=====
a = -{a = 3
  1 * a}

i = !sending

t = !sending and stuck
---
(source_file
  (assignment (identifier)
    (unary_expr (minus) 
      (brace_expr 
        (assignment (identifier) (number))
        (math_expr (number) (mul) (identifier)))))
  (assignment (identifier)
    (unary_expr (bang) (identifier)))
  (assignment (identifier)
    (boolean_expr (unary_expr (bang) (identifier))
      (and) (identifier))))

============
function_def
============
a = \a, b, c. a + b + c

---
(source_file
  (assignment
    (identifier)
    (function_def
      (identifier)
      (identifier)
      (identifier)
      (math_expr
        (math_expr
          (identifier) (plus) (identifier))
        (plus) (identifier)))))

