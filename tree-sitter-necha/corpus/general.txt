=======
numbers
=======
pub var ab = 1.2
pub const a = 123e-10
var a = 1

---
(source_file
  (declaration
    visibility: (pub) mutability: (var) name: (identifier) value: (number))
  (declaration 
    visibility: (pub) mutability: (const) name: (identifier) value: (number))
  (declaration 
    mutability: (var) name: (identifier) value: (number)))

=============
function call
=============
pub const af = a_fn la la la

---
(source_file
  (declaration
    visibility: (pub)
    mutability: (const)
    name: (identifier)
    value: (function_call
      id: (identifier)
      arg: (identifier)
      arg: (identifier)
      arg: (identifier))))

=============
function calls
=============
const a = a_fn la la la

const b = hello a 2_
  c

---
(source_file
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (function_call
      id: (identifier)
      arg: (identifier)
      arg: (identifier)
      arg: (identifier)))
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (function_call
      id: (identifier)
      arg: (identifier)
      arg: (number)
      arg: (identifier))))

==========
declaration
==========
pub var a = 133

---
(source_file
  (declaration 
    visibility: (pub) 
    mutability: (var)
    name: (identifier)
    value: (number)))

===========
declarations
===========
var a = a; const a = a _
  a

---
(source_file
  (declaration
    mutability: (var)
    name: (identifier) 
    value: (identifier))
  (declaration
    mutability: (const)
    name: (identifier)
    value: (function_call 
      id: (identifier) 
      arg: (identifier))))

=====
paren
=====
var f = (sum 1 1)
var d = outer _
  (sum 1 1.3)

---
(source_file
  (declaration 
    mutability: (var)
    name: (identifier) 
    value: (function_call 
      id: (identifier)
      arg: (number) 
      arg: (number)))
  (declaration 
    mutability: (var)
    name: (identifier) 
    value: 
      (function_call 
        id: (identifier) 
        arg: (function_call 
          id: (identifier) 
          arg: (number) 
          arg: (number)))))

==========
brace expr
==========
const s = { 
  const z = 4
  afunct {
    var a = 1.2 
    a
  } z
}

---
(source_file
  (declaration 
    mutability: (const) 
    name: (identifier)
    value: (brace_expr 
      (declaration 
        mutability: (const) name: (identifier) value: (number))
      (function_call 
        id: (identifier)
        arg: (brace_expr
          (declaration mutability: (var) name: (identifier) value: (number))
          (identifier))
        arg: (identifier)))))

=========
math expr
=========
const a = 1 + 1

const c = (calc 1) + 1 + (hola abc) * 2

---
(source_file
  (declaration mutability: (const) name: (identifier)
    value: (math_expr 
      lhs: (number) 
      op: (plus) 
      rhs: (number)))
  (declaration mutability: (const) name: (identifier)
    value: (math_expr
      lhs: (math_expr 
        lhs: (function_call id: (identifier) arg: (number))
        op: (plus)
        rhs: (number))
      op: (plus)
      rhs: (math_expr
          lhs: (function_call id: (identifier) arg: (identifier))
          op: (mul)
          rhs: (number)))))

=========
bool_expr
=========
var a = c + 1 < z == true 

---
(source_file
  (declaration
    mutability: (var)
    name: (identifier)
    value: (boolean_expr 
      lhs: (boolean_expr
        lhs: (math_expr lhs: (identifier) op: (plus) rhs: (number))
        op: (less)
        rhs: (identifier))
      op: (eq)
      rhs: (identifier))))

============
bracket expr
============
const a = [
  child = 1, 
  b,
  {const z = 1; mul z a}
]

---
(source_file
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (bracket_expr 
        (assignment name: (identifier) value: (number))
        (identifier)
        (brace_expr (declaration mutability: (const) name: (identifier) value: (number))
         (function_call id: (identifier) arg: (identifier) arg: (identifier))))))

=======
if_expr
=======
const a = if (b == 2) two else {
  const lala = 8 
  not_two
}

---
(source_file
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (if_expr 
      condition: 
        (boolean_expr 
         lhs: (identifier) op: (eq) rhs: (number))
      true: (identifier)
      false: 
        (brace_expr 
         (declaration 
          mutability: (const)
          name: (identifier) 
          value: (number)) 
         (identifier)))))

=====
unary
=====
const a = -{
  const a = 3
  1 * a}

const i = !sending

const t = !sending and stuck

---
(source_file
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (unary_expr 
      op: (minus)
      expr: (brace_expr 
       (declaration 
        mutability: (const)
        name: (identifier) 
        value: (number))
       (math_expr lhs: (number) op: (mul) rhs: (identifier)))))
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (unary_expr op: (bang) expr: (identifier)))
  (declaration 
    mutability: (const)
    name: (identifier)
    value: (boolean_expr 
      lhs: (unary_expr op: (bang) expr: (identifier))
      op: (and)
      rhs: (identifier))))

============
function_def
============
pub const a = \a, b, c. a + b + c

---
(source_file
  (declaration
    visibility: (pub)
    mutability: (const)
    name: (identifier)
    value: 
      (function_def
      arg: (identifier)
      arg: (identifier)
      arg: (identifier)
      body: (math_expr
        lhs: (math_expr
         lhs: (identifier) op: (plus) rhs: (identifier))
        op: (plus) 
        rhs: (identifier)))))

========
accessor
========
pub const a = a.b.c

const compicated = ([z = 1]).z
const more_compicated = {const a = 1; {b = a * 2; {b: a}}}.b

---
(source_file
 (declaration
  (pub)
  (const)
  (identifier)
  (accessor
   (accessor
    (identifier)
    (identifier))
   (identifier)))
 (declaration
  (const)
  (identifier)
  (accessor
   (bracket_expr
    (assignment
     (identifier)
     (number)))
   (identifier)))
 (declaration
  (const)
  (identifier)
  (accessor
   (brace_expr
    (declaration
     (const)
     (identifier)
     (number))
    (brace_expr
     (assignment
      (identifier)
      (math_expr
       (identifier)
       (mul)
       (number)))
     (record_expr
      (record_entry
       (identifier)
       (identifier)))))
   (identifier))))

==============
array
==============
pub const z = (a[1])

var a = {
  var a = [1,2,3]
  a[1] = 3
}

---
(source_file
 (declaration 
  visibility: (pub)
  mutability: (const)
  name: (identifier)
  value: (array_accessor 
    id: (identifier)
    index: (number)))
 (declaration
  mutability: (var)
  name: (identifier)
  value: (brace_expr
    (declaration
     mutability: (var)
     name: (identifier)
     value: (bracket_expr
       (number)
       (number)
       (number)))
     (assignment
      name: (array_accessor
        id: (identifier)
        index: (number))
      value: (number)))))

===
for
===
pub const lala = \max . for i in (range 0 max) {
    log i
}

---
(source_file
  (declaration
    visibility: (pub)
    mutability: (const)
    name: (identifier)
    value: (function_def arg: (identifier) 
      body: 
        (for_stmt
         var: (identifier)
         expr: (function_call id: (identifier) arg: (number) arg: (identifier))
         body: (brace_expr (function_call id: (identifier) arg: (identifier)))))))

=====
while
=====
const find = \arr, item. {
  var i = 0; 
  while arr[i] != item and i < arr.len
    i = i + 1

  if i < arr.len
    arr[i]
  else
    nothing
}

---
(source_file
 (declaration
  mutability: (const)
  name: (identifier)
  value: (function_def
    arg: (identifier)
    arg: (identifier)
    body: (brace_expr
      (declaration
       mutability: (var)
       name: (identifier)
       value: (number))
      (while_stmt
       condition: (boolean_expr
         lhs: (boolean_expr
           lhs: (array_accessor
             id: (identifier)
             index: (identifier))
           op: (neq)
           rhs: (identifier))
         op: (and)
         rhs: (boolean_expr
           lhs: (identifier)
           op: (less)
           rhs: (accessor
             lhs: (identifier)
             rhs: (identifier))))
       body: (assignment
         name: (identifier)
         value: (math_expr 
           lhs: (identifier)
           op: (plus)
           rhs: (number))))
      (if_expr
       condition: (boolean_expr
         lhs: (identifier)
         op: (less)
         rhs: (accessor
           lhs: (identifier)
           rhs: (identifier)))
       true: (array_accessor
         id: (identifier)
         index: (identifier))
       false: (identifier))))))

======
import
======
const std = import "std"

const main = \. log std.info.os

---
(source_file
 (import_decl
  mutability: (const)
  name: (identifier)
  file: (string
    (string_fragment)))
 (declaration
  mutability: (const)
  name: (identifier)
  value: (function_def
    body: (function_call
      id: (identifier)
      arg: (accessor
        lhs: (accessor
          lhs: (identifier)
          rhs: (identifier))
        rhs: (identifier))))))

======
record
======
const person = \n, l, born_year. {
  name: "warisnaque",
  lastname: "waripolo",
  age: current_year - born_year
}

const person_name = (person "li" "la" 1982).name

const uno = {
  uno: 1,
  dos: noArgsFn (),
  tres: "tres!",
}.uno

---
(source_file
 (declaration
  mutability: (const)
  name: (identifier)
  value: (function_def
    arg: (identifier)
    arg: (identifier)
    arg: (identifier)
    body: (record_expr
      record: (record_entry
        key: (identifier)
        value: (string
          (string_fragment)))
      record: (record_entry
        key: (identifier)
        value: (string
          (string_fragment)))
      record: (record_entry
        key: (identifier)
        value: (math_expr
          lhs: (identifier)
          op: (minus)
          rhs: (identifier))))))
          (declaration
           mutability: (const)
           name: (identifier)
           value: (accessor
             lhs: (function_call
               id: (identifier)
               arg: (string
                 (string_fragment))
               arg: (string
                 (string_fragment))
               arg: (number))
             rhs: (identifier)))
          (declaration
           mutability: (const)
           name: (identifier)
           value: (accessor
             lhs: (record_expr
               record: (record_entry
                 key: (identifier)
                 value: (number))
               record: (record_entry
                 key: (identifier)
                 value: (function_call
                  id: (identifier)
                  arg: (void_expr)))
               record: (record_entry
                 key: (identifier)
                 value: (string
                   (string_fragment))))
             rhs: (identifier))))

========
src test
========
var b = 1
var garbage = 1
var f1 = \abc, abc2. {
  b = garbage * 2
}

---
(source_file
  (declaration
    (var)
    (identifier)
    (number))
  (declaration
    (var)
    (identifier)
    (number))
  (declaration
    (var)
    (identifier)
    (function_def
      (identifier)
      (identifier)
      (brace_expr
        (assignment
          (identifier)
          (math_expr
            (identifier)
            (mul)
            (number)))))))
